//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Shell.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace TraSH.Gen {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class ShellParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		STRING=1, WORD=2, WHITESPACE=3, NEWLINE=4;
	public const int
		RULE_simpleCommand = 0, RULE_cmd = 1, RULE_args = 2, RULE_arg = 3;
	public static readonly string[] ruleNames = {
		"simpleCommand", "cmd", "args", "arg"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "STRING", "WORD", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Shell.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ShellParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ShellParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ShellParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SimpleCommandContext : ParserRuleContext {
		public CmdContext cmd() {
			return GetRuleContext<CmdContext>(0);
		}
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public SimpleCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShellListener typedListener = listener as IShellListener;
			if (typedListener != null) typedListener.EnterSimpleCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShellListener typedListener = listener as IShellListener;
			if (typedListener != null) typedListener.ExitSimpleCommand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleCommandContext simpleCommand() {
		SimpleCommandContext _localctx = new SimpleCommandContext(Context, State);
		EnterRule(_localctx, 0, RULE_simpleCommand);
		try {
			State = 12;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8; cmd();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9; cmd();
				State = 10; args(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmdContext : ParserRuleContext {
		public ArgContext arg() {
			return GetRuleContext<ArgContext>(0);
		}
		public CmdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShellListener typedListener = listener as IShellListener;
			if (typedListener != null) typedListener.EnterCmd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShellListener typedListener = listener as IShellListener;
			if (typedListener != null) typedListener.ExitCmd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmdContext cmd() {
		CmdContext _localctx = new CmdContext(Context, State);
		EnterRule(_localctx, 2, RULE_cmd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; arg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ArgContext arg() {
			return GetRuleContext<ArgContext>(0);
		}
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShellListener typedListener = listener as IShellListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShellListener typedListener = listener as IShellListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		return args(0);
	}

	private ArgsContext args(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArgsContext _localctx = new ArgsContext(Context, _parentState);
		ArgsContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_args, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 17; arg();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 23;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_args);
					State = 19;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 20; arg();
					}
					} 
				}
				State = 25;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public ITerminalNode WORD() { return GetToken(ShellParser.WORD, 0); }
		public ITerminalNode STRING() { return GetToken(ShellParser.STRING, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShellListener typedListener = listener as IShellListener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShellListener typedListener = listener as IShellListener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 6, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==WORD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return args_sempred((ArgsContext)_localctx, predIndex);
		}
		return true;
	}
	private bool args_sempred(ArgsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x6', '\x1F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\xF', 
		'\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x18', '\n', '\x4', '\f', 
		'\x4', '\xE', '\x4', '\x1B', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x2', '\x3', '\x6', '\x6', '\x2', '\x4', '\x6', '\b', '\x2', 
		'\x3', '\x3', '\x2', '\x3', '\x4', '\x2', '\x1C', '\x2', '\xE', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x10', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x12', '\x3', '\x2', '\x2', '\x2', '\b', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\xF', '\x5', '\x4', '\x3', '\x2', '\v', '\f', '\x5', '\x4', 
		'\x3', '\x2', '\f', '\r', '\x5', '\x6', '\x4', '\x2', '\r', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\n', '\x3', '\x2', '\x2', '\x2', '\xE', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\xF', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x11', '\x5', '\b', '\x5', '\x2', '\x11', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x13', '\b', '\x4', '\x1', '\x2', '\x13', '\x14', 
		'\x5', '\b', '\x5', '\x2', '\x14', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x15', '\x16', '\f', '\x3', '\x2', '\x2', '\x16', '\x18', '\x5', '\b', 
		'\x5', '\x2', '\x17', '\x15', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x19', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1A', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', 
		'\t', '\x2', '\x2', '\x2', '\x1D', '\t', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\xE', '\x19',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace TraSH.Gen
